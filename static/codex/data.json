{
    "project": {
        "name": "{{name}}",
        "description": "{{description}}",
        "version": "0.0.1",
        "url": "https://github.com/UsabilityDynamics/{{name}}/",
        "logo": "http://a3d72a45d111006ec192-ec5b80a12b0b09b4d52373336afb4254.r80.cf1.rackcdn.com/usability-dynamics.png"
    },
    "files": {
        "scripts/utility.js": {
            "name": "scripts/utility.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "scripts/utility.php": {
            "name": "scripts/utility.php",
            "modules": {},
            "classes": {
                "UD.Utility": 1
            },
            "fors": {},
            "namespaces": {
                "UD": 1
            }
        }
    },
    "modules": {},
    "classes": {
        "UD.Utility": {
            "name": "UD.Utility",
            "shortname": "Utility",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "UD",
            "file": "scripts/utility.php",
            "line": 14,
            "description": "UD API Distributable - Common Utility Used in Usability Dynamics, Inc. Products.",
            "version": "1.1.2"
        }
    },
    "classitems": [
        {
            "file": "scripts/utility.js",
            "line": 1,
            "description": "UD Utility",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "UD.Utility"
        },
        {
            "file": "scripts/utility.php",
            "line": 2,
            "description": "-",
            "copyright": "Copyright (c) 2010 - 2013, Usability Dynamics, Inc.",
            "author": "team@UD",
            "version": "0.0.1",
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 23,
            "description": "Default salt for encryption",
            "itemtype": "property",
            "name": "default_salt",
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 30,
            "description": "(1* 60 *60)",
            "itemtype": "property",
            "name": "blocking_for_new_validation_interval",
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 37,
            "description": "Constructor for initializing class, in static mode as well as dynamic.",
            "todo": [
                "Should make the transdomain configuraiton."
            ],
            "since": "1.1.1",
            "author": "potanin@UD",
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 49,
            "description": "Validate URL",
            "since": "1.1.1",
            "params": [
                {
                    "name": "string",
                    "description": "$url"
                }
            ],
            "return": {
                "description": "bool"
            },
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 62,
            "description": "Standard Instance",
            "since": "1.1",
            "author": "potanin@UD",
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 81,
            "description": "Strip out protected keys from an associative array.\n\nExample below will remove all keys from array that being with $$:\n\n<code>\nstrip_protected_keys( $my_array, array( 'prefix' => '$$' ) );\n</code>",
            "since": "2.0",
            "author": "potanin@UD",
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 116,
            "description": "Parse standard WordPress readme file",
            "source": "Readme Parser ( http://www.tomsdimension.de/wp-plugins/readme-parser )",
            "author": "potanin@UD",
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 194,
            "description": "Detects type.",
            "source": "http://php.net/manual/en/function.gettype.php",
            "since": "1.0.4",
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 213,
            "description": "Recursively remove empty values from array.",
            "version": "1.0.1",
            "since": "1.0.3",
            "author": "potanin@UD",
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 240,
            "description": "Determines if a passed timestamp is newer than a requirement.\n\nUsage: UD_API::is_fresher_than( $timestamp, '5 minutes' );",
            "since": "1.0.3",
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 251,
            "description": "Outputs JSON with valid headers and dies.",
            "updated": "1.0.6 - Added WP_Error object support.",
            "since": "1.0.2",
            "author": "potanin@UD",
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 283,
            "description": "Outputs XML with valid headers and dies.",
            "updated": "1.0.4",
            "author": "potanin@UD",
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 314,
            "description": "Starts a timer for the passed string.",
            "since": "1.0.2",
            "author": "potanin@UD",
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 325,
            "description": "Stop a timer.",
            "since": "1.0.2",
            "author": "potanin@UD",
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 336,
            "description": "Start Profiling, can also double as timer.\n\nProfiling will only start if another profiling process is not already running.\nXHProf is required, other profilers may be added later.",
            "updated": "1.0.4",
            "since": "1.0.2",
            "author": "potanin@UD",
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 363,
            "description": "Stop Profiling.",
            "since": "1.0.2",
            "author": "potanin@UD",
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 388,
            "description": "Attempt to download a remote files attachments",
            "params": [
                {
                    "name": "bool",
                    "description": "$images"
                },
                {
                    "name": "array",
                    "description": "$args"
                }
            ],
            "return": {
                "description": "bool|object"
            },
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 412,
            "description": "Regular Image Download.",
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 538,
            "description": "Checks if images exist and returns images dimensions",
            "params": [
                {
                    "name": "mixed",
                    "description": "$images Image url"
                },
                {
                    "name": "mixed",
                    "description": "$args"
                }
            ],
            "return": {
                "description": "array"
            },
            "author": "peshkov@UD",
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 598,
            "description": "Return useful information about the current server.",
            "since": "1.0.3",
            "author": "potanin@UD",
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 639,
            "description": "Converts slashes for Windows paths.",
            "since": "1.0.0",
            "source": "Flawless",
            "author": "potanin@UD",
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 650,
            "description": "Applies trim() function to all values in an array",
            "source": "WP-Property",
            "since": "0.6.0",
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 671,
            "description": "Returns all available image sizes",
            "source": "WP-Property",
            "since": "2.0",
            "return": {
                "description": "array keys: 'width' and 'height'"
            },
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 707,
            "description": "Returns Image link (url)\n\nIf image with the current size doesn't exist, we try to generate it.\nIf image cannot be resized, the URL to the main image (original) is returned.",
            "todo": [
                "Add something to check if requested image size is bigger than the original",
                "in which case cannot be \"resized\"",
                "Add a check to see if the specified image dimensions have changed. Right now only checks if slug exists",
                "not the actualy size."
            ],
            "params": [
                {
                    "name": "bool",
                    "description": "$attachment_id"
                },
                {
                    "name": "bool",
                    "description": "$size"
                },
                {
                    "name": "array",
                    "description": "$args"
                }
            ],
            "return": {
                "description": "array|bool|mixed"
            },
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 799,
            "description": "Insert array into an associative array before a specific key",
            "source": "http://stackoverflow.com/questions/6501845/php-need-help-inserting-arrays-into-associative-arrays-at-given-keys",
            "author": "potanin@UD",
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 816,
            "description": "Insert array into an associative array after a specific key",
            "source": "http://stackoverflow.com/questions/6501845/php-need-help-inserting-arrays-into-associative-arrays-at-given-keys",
            "author": "potanin@UD",
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 833,
            "description": "Attemp to convert a plural US word into a singular.",
            "todo": [
                "API Service Candidate since we ideally need a dictionary reference."
            ],
            "author": "potanin@UD",
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 858,
            "description": "Convert bytes into the logical unit of measure based on size.",
            "source": "Flawless",
            "since": "1.0.0",
            "author": "potanin@UD",
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 870,
            "description": "Used to enable/disable/print SQL log\n\nUsage:\nself::sql_log( 'enable' );\nself::sql_log( 'disable' );\n$queries= self::sql_log( 'print_log' );",
            "since": "0.1.0",
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 906,
            "description": "Return data for UD Log",
            "updated": "1.04",
            "sincde": "1.03",
            "note": "This is a proof of concept, in future it should be able to support AJAX calls so can be displayed via Dynamic Filter.",
            "author": "potanin@UD",
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 956,
            "description": "Return data for UD Log",
            "note": "This is a proof of concept, in future it should be able to support AJAX calls so can be displayed via Dynamic Filter.",
            "author": "potanin@UD",
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 1022,
            "description": "Removes data from Logs table",
            "params": [
                {
                    "name": "mixed",
                    "description": "$args"
                }
            ],
            "author": "peshkov@UD",
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 1049,
            "description": "Add an entry to the plugin-specifig log.\n\nCreates log if one does not exist.\n\n<code>\nUD\\Utility::log( \"Settings updated.\" );\n</code>",
            "deprecated": true,
            "deprecationMessage": "peshkov@UD",
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 1119,
            "description": "Helpder function for figuring out if another specific function is a predecesor of current function.",
            "since": "1.0.0",
            "author": "potanin@UD",
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 1135,
            "description": "Helpder function for figuring out if a specific file is a predecesor of current file.",
            "since": "1.0.0",
            "author": "potanin@UD",
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 1151,
            "description": "Fixed serialized arrays which sometimes get messed up in WordPress",
            "source": "http://shauninman.com/archive/2008/01/08/recovering_truncated_php_serialized_arrays",
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 1161,
            "description": "The recursive function that does all of the heavy lifing. Do not call directly.",
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 1242,
            "description": "Determine if an item is in array and return checked",
            "since": "0.5.0",
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 1255,
            "description": "Check if the current WP version is older then given parameter $version.",
            "params": [
                {
                    "name": "string",
                    "description": "$version"
                }
            ],
            "since": "1.0.0",
            "author": "peshkov@UD",
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 1266,
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 1272,
            "description": "Determine if any requested template exists and return path to it.\n\n== Usage ==\nThe function will search through: STYLESHEETPATH, TEMPLATEPATH, and any custom paths you pass as second argument.\n\n$best_template = UD\\Utility::get_template_part( array(\n  'template-ideal-match',\n  'template-default',\n), array( PATH_TO_MY_TEMPLATES );\n\nNote: load_template() extracts $wp_query->query_vars into the loaded template, so to add any global variables to the template, add them to\n$wp_query->query_vars prior to calling this function.",
            "name": "array $name List of requested templates. Will be return the first found",
            "path": "array $path [optional]. Method tries to find template in theme, but also it can be found in given list of pathes.",
            "load": "boolean [optional]. If true and a template is found, the template will be loaded via load_template() and returned as a string",
            "author": "peshkov@UD",
            "version": "1.0",
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 1341,
            "description": "Determine if any requested template exists and return path to it.\n\nMigrated from ud_api.php.. - potanin@UD",
            "todo": [
                "Merge with x_get_template_part() to support $slug and $name",
                "as well as $path."
            ],
            "name": "array $name List of requested templates. Will be return the first found",
            "path": "array $path [optional]. Method tries to find template in theme, but also it can be found in given list of pathes.",
            "author": "peshkov@UD",
            "version": "1.0",
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 1357,
            "description": "Set default instance.\nTemplate can depend on instance. For example: facebook, PDF, etc.",
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 1388,
            "description": "The goal of function is going through specific filters and return (or print) classes.\nThis function should not be called directly.\nEvery ud plugin/theme should have own short function ( wrapper ) for calling it. E.g., see: wpp_css().\nSo, use it in template as: <div id=\"my_element\" class=\"<?php wpp_css(\"{name_of_template}::my_element\"); ?>\"> </div>\n\nArguments:\n - instance [string] - UD plugin|theme's slug. E.g.: wpp, denali, wpi, etc\n - element [string] - specific element in template which will use the current classes.\n   Element should be called as {template}::{specific_name_of_element}. Where {template} is name of template,\n   where current classes will be used. This standart is optional. You can set any element's name if you want.\n - classes [array] - set of classes which will be used for element.\n - return [boolean] - If false, the function prints all classes like 'class1 class2 class3'",
            "params": [
                {
                    "name": "array",
                    "description": "$args"
                }
            ],
            "author": "peshkov@UD",
            "version": "0.1",
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 1444,
            "description": "Return simple array of column tables in a table",
            "version": "0.6",
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 1467,
            "description": "Port of jQuery.extend() function.",
            "since": "1.0.3",
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 1497,
            "description": "Returns a URL to a post object based on passed variable.\n\nIf its a number, then assumes its the id, If it resembles a slug, then get the first slug match.",
            "since": "1.0",
            "params": [
                {
                    "name": "string",
                    "description": "$title A page title, although ID integer can be passed as well"
                }
            ],
            "return": {
                "description": "string The page's URL if found, otherwise the general blog URL"
            },
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 1522,
            "description": "Used to get the current plugin's log created via UD class\n\nIf no log exists, it creates one, and then returns it in chronological order.\n\nExample to view log:\n<code>\nprint_r( self::get_log() );\n</code>\n\n$param string Event description",
            "deprecated": true,
            "deprecationMessage": "peshkov@UD",
            "uses": [
                "get_option()",
                "update_option()"
            ],
            "return": {
                "description": "array Using the get_option function returns the contents of the log."
            },
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 1565,
            "description": "Delete UD log for this plugin.",
            "uses": [
                "update_option()"
            ],
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 1583,
            "description": "Creates Admin Menu page for UD Log",
            "todo": [
                "Need to make sure this will work if multiple plugins utilize the UD classes"
            ],
            "see": [
                "function show_log_page"
            ],
            "since": "1.0",
            "uses": [
                "add_action() Calls 'admin_menu' hook with an anonymous ( lambda-style ) function which uses add_menu_page to create a UI Log page"
            ],
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 1602,
            "description": "Displays the UD UI log page.",
            "todo": [
                "Add button or link to delete log",
                "Add nonce to clear_log functions",
                "Should be refactored to implement adding LOG tabs for different instances (wpp",
                "wpi",
                "wp-crm). peshkov@UD"
            ],
            "since": "1.0.0",
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 1653,
            "description": "Replace in $str all entries of keys of the given $values\nwhere each key will be rounded by $brackets['left'] and $brackets['right']\nwith the relevant values of the $values",
            "params": [
                {
                    "name": "string|array",
                    "description": "$str"
                },
                {
                    "name": "array",
                    "description": "$values"
                },
                {
                    "name": "array",
                    "description": "$brackets"
                }
            ],
            "return": {
                "description": "string|array"
            },
            "author": "odokienko@UD",
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 1672,
            "description": "Wrapper function to send notification with WP-CRM or without one",
            "params": [
                {
                    "name": "mixed",
                    "description": "$args['user']"
                },
                {
                    "name": "sting",
                    "description": "$args['trigger_action']"
                },
                {
                    "name": "sting",
                    "description": "$args['data']             aka $notification_data"
                },
                {
                    "name": "sting",
                    "description": "$args['crm_log_message']"
                },
                {
                    "name": "sting",
                    "description": "$args['subject']          using in email notification"
                },
                {
                    "name": "sting",
                    "description": "$args['message']          using in email notification"
                }
            ],
            "uses": [
                "self::replace_data()",
                "wp_crm_send_notification()"
            ],
            "return": {
                "description": "boolean false if notification was not sent successfully"
            },
            "autor": "odokienko@UD",
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 1736,
            "description": "Turns a passed string into a URL slug\n\nArgument 'check_existance' will make the function check if the slug is used by a WordPress post",
            "params": [
                {
                    "name": "string",
                    "description": "$content"
                },
                {
                    "name": "string",
                    "description": "$args Optional list of arguments to overwrite the defaults."
                }
            ],
            "since": "1.0",
            "uses": [
                "add_action() Calls 'admin_menu' hook with an anonymous (lambda-style) function which uses add_menu_page to create a UI Log page"
            ],
            "return": {
                "description": "string"
            },
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 1766,
            "description": "Convert a slug to a more readable string",
            "since": "1.3",
            "return": {
                "description": "string"
            },
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 1776,
            "description": "Returns location information from Google Maps API call.\n\nFrom version 1.2.0, the geohash is generated automatically.",
            "version": "1.2.0",
            "since": "1.0.0",
            "return": {
                "description": "object"
            },
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 1942,
            "description": "Returns avaliability of Google's Geocoding Service based on time of last returned status OVER_QUERY_LIMIT",
            "uses": [
                "const self::blocking_for_new_validation_interval",
                "option ud::geo_locate_address_last_OVER_QUERY_LIMIT"
            ],
            "params": [
                {
                    "name": "type",
                    "description": "$update used to set option value in time()"
                }
            ],
            "return": {
                "description": "boolean"
            },
            "author": "odokienko@UD",
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 1983,
            "description": "Returns current url",
            "params": [
                {
                    "name": "mixed",
                    "description": "$args GET args which should be added to url"
                },
                {
                    "name": "mixed",
                    "description": "$except_args GET args which will be removed from URL if they exist"
                }
            ],
            "author": "peshkov@UD",
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 2012,
            "description": "Prepares data for SQL query.\n\ni.e. It should be used when $pwdb->prepare cannot be used.\nFor example:\nwe have situation when SQL query could not be prepared by default $wpdb->prepare:\n$titles = array( \"John's appartment\", \" '; DELETE FROM $wpdb->posts;# \" );\n$wpdb->query( \"SELECT ID FROM $wpdb->posts WHERE post_title IN ( '\" . implode (\"','\", UD_Utility::prepare_to_sql( $titles ) ) . \"' ) \" );",
            "global": "type $wpdb",
            "params": [
                {
                    "name": "mixed",
                    "description": "$args data which should be prepared for SQL query"
                }
            ],
            "return": {
                "description": "mixed prepared data"
            },
            "author": "peshkov@UD",
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 2046,
            "description": "Returns date and/or time using the WordPress date or time format, as configured.",
            "params": [
                {
                    "name": "string",
                    "description": "$time Date or time to use for calculation."
                },
                {
                    "name": "string",
                    "description": "$args List of arguments to overwrite the defaults."
                }
            ],
            "uses": [
                "wp_parse_args()",
                "get_option()"
            ],
            "return": {
                "description": "string|bool Returns formatted date or time, or false if no time passed."
            },
            "updated": "3.0",
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 2083,
            "description": "This function is for the encryption of data",
            "source": "http://php.net/manual/en/function.base64-encode.php",
            "author": "williams@ud",
            "params": [
                {
                    "name": "mixed",
                    "description": "$pt Object or plain text string"
                },
                {
                    "name": "string",
                    "description": "$salt The salt to use"
                }
            ],
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 2102,
            "description": "This function decrypts data",
            "source": "http://php.net/manual/en/function.base64-encode.php",
            "author": "williams@ud",
            "params": [
                {
                    "name": "mixed",
                    "description": "$ct Ciphertext"
                },
                {
                    "name": "string",
                    "description": "$salt The salt to use"
                }
            ],
            "return": {
                "description": "string"
            },
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 2127,
            "description": "Returns array of full pathes of files or directories which we try to find.",
            "params": [
                {
                    "name": "mixed",
                    "description": "$needle  Directory(ies) or file(s) which we want to find"
                },
                {
                    "name": "string",
                    "description": "$path The path where we try to find it"
                },
                {
                    "name": "boolean",
                    "description": "$_is_dir We're finding dir or file. Default is file."
                }
            ],
            "return": {
                "description": "array"
            },
            "author": "peshkov@UD",
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 2164,
            "description": "Gets complicated html entity e.g. Table and ou|ol\nand removes whitespace characters include new line.\nwe should to do this before use nl2br",
            "author": "odokienko@UD",
            "class": "UD.Utility",
            "namespace": "UD"
        },
        {
            "file": "scripts/utility.php",
            "line": 2178,
            "description": "Adds get_called_class() function if id doesn't exist\nPHP < 5.3 compatibility",
            "see": [
                ": http://stackoverflow.com/questions/506705/php-get-classname-from-static-call-in-extended-class"
            ],
            "author": "peshkov@UD",
            "class": "UD.Utility",
            "namespace": "UD"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " scripts/utility.js:1"
        },
        {
            "message": "unknown tag: copyright",
            "line": " scripts/utility.php:2"
        },
        {
            "message": "unknown tag: version",
            "line": " scripts/utility.php:2"
        },
        {
            "message": "unknown tag: version",
            "line": " scripts/utility.php:14"
        },
        {
            "message": "unknown tag: source",
            "line": " scripts/utility.php:116"
        },
        {
            "message": "unknown tag: source",
            "line": " scripts/utility.php:194"
        },
        {
            "message": "unknown tag: version",
            "line": " scripts/utility.php:213"
        },
        {
            "message": "unknown tag: updated",
            "line": " scripts/utility.php:251"
        },
        {
            "message": "unknown tag: updated",
            "line": " scripts/utility.php:283"
        },
        {
            "message": "unknown tag: updated",
            "line": " scripts/utility.php:336"
        },
        {
            "message": "unknown tag: source",
            "line": " scripts/utility.php:639"
        },
        {
            "message": "unknown tag: source",
            "line": " scripts/utility.php:650"
        },
        {
            "message": "unknown tag: source",
            "line": " scripts/utility.php:671"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " scripts/utility.php:671"
        },
        {
            "message": "unknown tag: source",
            "line": " scripts/utility.php:799"
        },
        {
            "message": "unknown tag: source",
            "line": " scripts/utility.php:816"
        },
        {
            "message": "unknown tag: source",
            "line": " scripts/utility.php:858"
        },
        {
            "message": "unknown tag: updated",
            "line": " scripts/utility.php:906"
        },
        {
            "message": "unknown tag: sincde",
            "line": " scripts/utility.php:906"
        },
        {
            "message": "unknown tag: note",
            "line": " scripts/utility.php:906"
        },
        {
            "message": "unknown tag: note",
            "line": " scripts/utility.php:956"
        },
        {
            "message": "replacing incorrect tag: depreciated with deprecated",
            "line": " scripts/utility.php:1049"
        },
        {
            "message": "unknown tag: source",
            "line": " scripts/utility.php:1151"
        },
        {
            "message": "unknown tag: name",
            "line": " scripts/utility.php:1272"
        },
        {
            "message": "unknown tag: path",
            "line": " scripts/utility.php:1272"
        },
        {
            "message": "unknown tag: load",
            "line": " scripts/utility.php:1272"
        },
        {
            "message": "unknown tag: version",
            "line": " scripts/utility.php:1272"
        },
        {
            "message": "unknown tag: name",
            "line": " scripts/utility.php:1341"
        },
        {
            "message": "unknown tag: path",
            "line": " scripts/utility.php:1341"
        },
        {
            "message": "unknown tag: version",
            "line": " scripts/utility.php:1341"
        },
        {
            "message": "unknown tag: version",
            "line": " scripts/utility.php:1388"
        },
        {
            "message": "unknown tag: version",
            "line": " scripts/utility.php:1444"
        },
        {
            "message": "replacing incorrect tag: depreciated with deprecated",
            "line": " scripts/utility.php:1522"
        },
        {
            "message": "unknown tag: autor",
            "line": " scripts/utility.php:1672"
        },
        {
            "message": "unknown tag: version",
            "line": " scripts/utility.php:1776"
        },
        {
            "message": "unknown tag: updated",
            "line": " scripts/utility.php:2046"
        },
        {
            "message": "unknown tag: source",
            "line": " scripts/utility.php:2083"
        },
        {
            "message": "unknown tag: source",
            "line": " scripts/utility.php:2083"
        },
        {
            "message": "unknown tag: source",
            "line": " scripts/utility.php:2102"
        },
        {
            "message": "unknown tag: source",
            "line": " scripts/utility.php:2102"
        },
        {
            "message": "Missing item type\nUD Utility",
            "line": " scripts/utility.js:1"
        },
        {
            "message": "Missing item type\n-",
            "line": " scripts/utility.php:2"
        },
        {
            "message": "Missing item type\nConstructor for initializing class, in static mode as well as dynamic.",
            "line": " scripts/utility.php:37"
        },
        {
            "message": "Missing item type\nValidate URL",
            "line": " scripts/utility.php:49"
        },
        {
            "message": "Missing item type\nStandard Instance",
            "line": " scripts/utility.php:62"
        },
        {
            "message": "Missing item type\nStrip out protected keys from an associative array.\n\nExample below will remove all keys from array that being with $$:\n\n<code>\nstrip_protected_keys( $my_array, array( 'prefix' => '$$' ) );\n</code>",
            "line": " scripts/utility.php:81"
        },
        {
            "message": "Missing item type\nParse standard WordPress readme file",
            "line": " scripts/utility.php:116"
        },
        {
            "message": "Missing item type\nDetects type.",
            "line": " scripts/utility.php:194"
        },
        {
            "message": "Missing item type\nRecursively remove empty values from array.",
            "line": " scripts/utility.php:213"
        },
        {
            "message": "Missing item type\nDetermines if a passed timestamp is newer than a requirement.\n\nUsage: UD_API::is_fresher_than( $timestamp, '5 minutes' );",
            "line": " scripts/utility.php:240"
        },
        {
            "message": "Missing item type\nOutputs JSON with valid headers and dies.",
            "line": " scripts/utility.php:251"
        },
        {
            "message": "Missing item type\nOutputs XML with valid headers and dies.",
            "line": " scripts/utility.php:283"
        },
        {
            "message": "Missing item type\nStarts a timer for the passed string.",
            "line": " scripts/utility.php:314"
        },
        {
            "message": "Missing item type\nStop a timer.",
            "line": " scripts/utility.php:325"
        },
        {
            "message": "Missing item type\nStart Profiling, can also double as timer.\n\nProfiling will only start if another profiling process is not already running.\nXHProf is required, other profilers may be added later.",
            "line": " scripts/utility.php:336"
        },
        {
            "message": "Missing item type\nStop Profiling.",
            "line": " scripts/utility.php:363"
        },
        {
            "message": "Missing item type\nAttempt to download a remote files attachments",
            "line": " scripts/utility.php:388"
        },
        {
            "message": "Missing item type\nRegular Image Download.",
            "line": " scripts/utility.php:412"
        },
        {
            "message": "Missing item type\nChecks if images exist and returns images dimensions",
            "line": " scripts/utility.php:538"
        },
        {
            "message": "Missing item type\nReturn useful information about the current server.",
            "line": " scripts/utility.php:598"
        },
        {
            "message": "Missing item type\nConverts slashes for Windows paths.",
            "line": " scripts/utility.php:639"
        },
        {
            "message": "Missing item type\nApplies trim() function to all values in an array",
            "line": " scripts/utility.php:650"
        },
        {
            "message": "Missing item type\nReturns all available image sizes",
            "line": " scripts/utility.php:671"
        },
        {
            "message": "Missing item type\nReturns Image link (url)\n\nIf image with the current size doesn't exist, we try to generate it.\nIf image cannot be resized, the URL to the main image (original) is returned.",
            "line": " scripts/utility.php:707"
        },
        {
            "message": "Missing item type\nInsert array into an associative array before a specific key",
            "line": " scripts/utility.php:799"
        },
        {
            "message": "Missing item type\nInsert array into an associative array after a specific key",
            "line": " scripts/utility.php:816"
        },
        {
            "message": "Missing item type\nAttemp to convert a plural US word into a singular.",
            "line": " scripts/utility.php:833"
        },
        {
            "message": "Missing item type\nConvert bytes into the logical unit of measure based on size.",
            "line": " scripts/utility.php:858"
        },
        {
            "message": "Missing item type\nUsed to enable/disable/print SQL log\n\nUsage:\nself::sql_log( 'enable' );\nself::sql_log( 'disable' );\n$queries= self::sql_log( 'print_log' );",
            "line": " scripts/utility.php:870"
        },
        {
            "message": "Missing item type\nReturn data for UD Log",
            "line": " scripts/utility.php:906"
        },
        {
            "message": "Missing item type\nReturn data for UD Log",
            "line": " scripts/utility.php:956"
        },
        {
            "message": "Missing item type\nRemoves data from Logs table",
            "line": " scripts/utility.php:1022"
        },
        {
            "message": "Missing item type\nAdd an entry to the plugin-specifig log.\n\nCreates log if one does not exist.\n\n<code>\nUD\\Utility::log( \"Settings updated.\" );\n</code>",
            "line": " scripts/utility.php:1049"
        },
        {
            "message": "Missing item type\nHelpder function for figuring out if another specific function is a predecesor of current function.",
            "line": " scripts/utility.php:1119"
        },
        {
            "message": "Missing item type\nHelpder function for figuring out if a specific file is a predecesor of current file.",
            "line": " scripts/utility.php:1135"
        },
        {
            "message": "Missing item type\nFixed serialized arrays which sometimes get messed up in WordPress",
            "line": " scripts/utility.php:1151"
        },
        {
            "message": "Missing item type\nThe recursive function that does all of the heavy lifing. Do not call directly.",
            "line": " scripts/utility.php:1161"
        },
        {
            "message": "Missing item type\nDetermine if an item is in array and return checked",
            "line": " scripts/utility.php:1242"
        },
        {
            "message": "Missing item type\nCheck if the current WP version is older then given parameter $version.",
            "line": " scripts/utility.php:1255"
        },
        {
            "message": "Missing item type",
            "line": " scripts/utility.php:1266"
        },
        {
            "message": "Missing item type\nDetermine if any requested template exists and return path to it.\n\n== Usage ==\nThe function will search through: STYLESHEETPATH, TEMPLATEPATH, and any custom paths you pass as second argument.\n\n$best_template = UD\\Utility::get_template_part( array(\n  'template-ideal-match',\n  'template-default',\n), array( PATH_TO_MY_TEMPLATES );\n\nNote: load_template() extracts $wp_query->query_vars into the loaded template, so to add any global variables to the template, add them to\n$wp_query->query_vars prior to calling this function.",
            "line": " scripts/utility.php:1272"
        },
        {
            "message": "Missing item type\nDetermine if any requested template exists and return path to it.\n\nMigrated from ud_api.php.. - potanin@UD",
            "line": " scripts/utility.php:1341"
        },
        {
            "message": "Missing item type\nSet default instance.\nTemplate can depend on instance. For example: facebook, PDF, etc.",
            "line": " scripts/utility.php:1357"
        },
        {
            "message": "Missing item type\nThe goal of function is going through specific filters and return (or print) classes.\nThis function should not be called directly.\nEvery ud plugin/theme should have own short function ( wrapper ) for calling it. E.g., see: wpp_css().\nSo, use it in template as: <div id=\"my_element\" class=\"<?php wpp_css(\"{name_of_template}::my_element\"); ?>\"> </div>\n\nArguments:\n - instance [string] - UD plugin|theme's slug. E.g.: wpp, denali, wpi, etc\n - element [string] - specific element in template which will use the current classes.\n   Element should be called as {template}::{specific_name_of_element}. Where {template} is name of template,\n   where current classes will be used. This standart is optional. You can set any element's name if you want.\n - classes [array] - set of classes which will be used for element.\n - return [boolean] - If false, the function prints all classes like 'class1 class2 class3'",
            "line": " scripts/utility.php:1388"
        },
        {
            "message": "Missing item type\nReturn simple array of column tables in a table",
            "line": " scripts/utility.php:1444"
        },
        {
            "message": "Missing item type\nPort of jQuery.extend() function.",
            "line": " scripts/utility.php:1467"
        },
        {
            "message": "Missing item type\nReturns a URL to a post object based on passed variable.\n\nIf its a number, then assumes its the id, If it resembles a slug, then get the first slug match.",
            "line": " scripts/utility.php:1497"
        },
        {
            "message": "Missing item type\nUsed to get the current plugin's log created via UD class\n\nIf no log exists, it creates one, and then returns it in chronological order.\n\nExample to view log:\n<code>\nprint_r( self::get_log() );\n</code>\n\n$param string Event description",
            "line": " scripts/utility.php:1522"
        },
        {
            "message": "Missing item type\nDelete UD log for this plugin.",
            "line": " scripts/utility.php:1565"
        },
        {
            "message": "Missing item type\nCreates Admin Menu page for UD Log",
            "line": " scripts/utility.php:1583"
        },
        {
            "message": "Missing item type\nDisplays the UD UI log page.",
            "line": " scripts/utility.php:1602"
        },
        {
            "message": "Missing item type\nReplace in $str all entries of keys of the given $values\nwhere each key will be rounded by $brackets['left'] and $brackets['right']\nwith the relevant values of the $values",
            "line": " scripts/utility.php:1653"
        },
        {
            "message": "Missing item type\nWrapper function to send notification with WP-CRM or without one",
            "line": " scripts/utility.php:1672"
        },
        {
            "message": "Missing item type\nTurns a passed string into a URL slug\n\nArgument 'check_existance' will make the function check if the slug is used by a WordPress post",
            "line": " scripts/utility.php:1736"
        },
        {
            "message": "Missing item type\nConvert a slug to a more readable string",
            "line": " scripts/utility.php:1766"
        },
        {
            "message": "Missing item type\nReturns location information from Google Maps API call.\n\nFrom version 1.2.0, the geohash is generated automatically.",
            "line": " scripts/utility.php:1776"
        },
        {
            "message": "Missing item type\nReturns avaliability of Google's Geocoding Service based on time of last returned status OVER_QUERY_LIMIT",
            "line": " scripts/utility.php:1942"
        },
        {
            "message": "Missing item type\nReturns current url",
            "line": " scripts/utility.php:1983"
        },
        {
            "message": "Missing item type\nPrepares data for SQL query.\n\ni.e. It should be used when $pwdb->prepare cannot be used.\nFor example:\nwe have situation when SQL query could not be prepared by default $wpdb->prepare:\n$titles = array( \"John's appartment\", \" '; DELETE FROM $wpdb->posts;# \" );\n$wpdb->query( \"SELECT ID FROM $wpdb->posts WHERE post_title IN ( '\" . implode (\"','\", UD_Utility::prepare_to_sql( $titles ) ) . \"' ) \" );",
            "line": " scripts/utility.php:2012"
        },
        {
            "message": "Missing item type\nReturns date and/or time using the WordPress date or time format, as configured.",
            "line": " scripts/utility.php:2046"
        },
        {
            "message": "Missing item type\nThis function is for the encryption of data",
            "line": " scripts/utility.php:2083"
        },
        {
            "message": "Missing item type\nThis function decrypts data",
            "line": " scripts/utility.php:2102"
        },
        {
            "message": "Missing item type\nReturns array of full pathes of files or directories which we try to find.",
            "line": " scripts/utility.php:2127"
        },
        {
            "message": "Missing item type\nGets complicated html entity e.g. Table and ou|ol\nand removes whitespace characters include new line.\nwe should to do this before use nl2br",
            "line": " scripts/utility.php:2164"
        },
        {
            "message": "Missing item type\nAdds get_called_class() function if id doesn't exist\nPHP < 5.3 compatibility",
            "line": " scripts/utility.php:2178"
        }
    ]
}